a = [1,2]
a
import re
re.compile("(\w+)\s+(\d+)")
p = re.compile("(\w+)\s+(\d+)")
p.findall
p.findall("a 3 b 2 c   5")
ascii('1')
ascii(1)
ascii(2)
ascii(89)
ascii("hello there")
ascii.__doc__
print(ascii.__doc__)
repr.__doc__
print repr.__doc__
print(repr.__doc__)
repr('this'()
p.flags
p.subn.__doc__
print(p.subn.__doc__)
import sys
sys.argv
5+$
5+12
.1+.1
1/3
1/3+.1
(1/3+.1)*3
_
Fraction
from fractions import Fraction
Fraction(4,6)
_ * 3
a = """
this is
a 
test
"""
print(a)
a = """\
this is a\
 test
"""
print(a)
a = "This " "is"
a
a = range('d')
char
a = "this is a test"
a[2]
a[2:12]
a[0]
a[-1]
a[-1:12]
a[-1:-5]
a[-5:-1]
import SimpleHTTPServer
import http.server
s = http.server
print(s.test.__doc__)
for x in s:
  print x
for x in s:
  print x
for x in s:
  print(x)
print(s.http.__doc__)
print(s.http.pow__doc__)
print(s.pow__doc__)
s.html.__doc__
s.nobody.__doc__
for x,y in range(3),range(4):
  print x
for x,y in range(3),range(4):
  print(x)
  print(y)
for x,y in [range(3),range(4)]:
  print(x)
  print(y)
nums = [1,2,3]
nums.insert(4)
nums.insert(nums.len(), 4)
nums.insert(nums.len, 4)
nums.len
nums.length
nums.length()
nums.__len__
len(nums)
nums.insert(len(nums), 4)
nums
for i in nums[:]:
  nums.insert(len(nums), i*2)
nums
nums.insert(0,9)
nums
nums.insert(-1,10)
nums
print(range(10)
)
range
range(10)
r = range(10)
for i in r:
  print(i)
for i in r:
  print(i)
list(1,2,3)
list([1,3,4])
list(range(1,10,2))
for x in range(3):
  print(x)
else:
  print('done')
def test(a):
  return a+1
test(2)
def exec(a):
  return a()
def foo:
def foo():
  print("hi")
  print("there")
exec(foo)
foo
foo()
ask_ok
def foo(a, b=2, c):
  print(a + ":" + b + ":" + c)
a = 1
a = 1 || false
a = true || false
a = True | False
a
a = True || False
true
True
a = []
b = a | [1,2,3]
def foo(*args):
 print(args[0])
 print(args[2])
foo(1,2,3,4,5)
def foo(**map):
 print(map['friend'])
['friend':'you']
m = {'friend':'Moses'}
m
foo(m)
foo(**m)
f = lambda x: x + 1
f 0
f(12)
f(f(1))
f = lambda x: x[1]
f((1,2))
f((1,2,4,5))
def foo():
  """Test
  There's nothing more than test.
  """
  return 1
foo()
foo.__doc__
map(lambda x: x**x, range(10)
map(lambda x: x**x, range(10))
m = map(lambda x: x**x, range(10))
m
m(1)
m[2]
m[
m['1']
print(m)
list(m)
map.__doc__
list(map(range(2), range(4), range(6)))
list(map(lambda x,y: x*y, range(4), range(1,5)))
[x*y for x in range(4) y in rage(1,5)]
[x*y for x in range(4) for y in rage(1,5)]
[x*y for x in range(4) for y in range(1,5)]
zip([1,2,3])
zip([1,2,3], [4,5,6])
list(zip([1,2,3], [4,5,6]))
1 == 2
1 == 1
[1,2] == [1,2]
a = [1,2]
b = [1]
a == 1
a == b
b.append(2)
a == b
(1,2)==(2,1)
{1,2,3}=={3,2,1}
{1:2, 3:4}
a = {1:2, 3:4}
a['1']
a[1]
a[2]
a[3]
a.items
list(a.items)
list(a.items())
a.items()
list(a.keys())
list(a.values())
list(enumerate(a.values()))
reversed([1,2,3,4])
list(reversed([1,2,3,4]))
a = [1]
for x in a:
   a.append(x+1)
a
a = []
b = a or [1]
b
b = c or a
import imp
imp.get_magic.__doc__
D
dir()
__name__
__loader__
__loader__()
__spec__
__doc__
a = 123
dir()
a
open("ATi3C.1.xml")
o = open("ATi3C.1.xml")
o
for (line in o):
for (line in o) :
lines = o.readlines()
lines
import re
p = re.compile('\w+')
lines[0]
p.match(lines[0])
p.findall(lines[0])
linesMatches = [p.findall(line) for line in lines]
linesMatches[0]
linesMatches
all = list(linesMatches)
all
a = []
for (x in linesMatches[:]):
for x in linesMatches[:]:
  a.extend(list(x))
a
for w in a:
map = {}
for w in a:
 c = map[w] or 0
 map[w] = c + 1
'xml' in map
for w in a:
 c = (w in map)? map[w] : 0
for w in a:
 if (w in map):
  c = map[w]
 else
 else:
for w in a:
 if (w in map):
  c = map[w]
 else:
  c = 0
 map[w] = c + 1
map
map.values()
import operator
s = sorted(map.items(), key=operator.itemgetter(1))
s
map.values()
map.items()
s.items()
s
sorted.__doc__
operator.itemgetter(1)
q
:q
:quit
print('hello my friend', end='t')
print('hello my friend', end=' ')
print.__doc__
print("this is a test", sep='x')
print("this " "is a test", sep='x')
print("this", "is", "a", "test", sep='x')
map = {'hello':'world', 'my':'friend', 'out':'there'}
print("1: {}", map['hello'])
print("1: {}".format(map['hello']))
print("1: {}".format(map))
print("1: {0}".format(map))
print("1: {1}".format(map))
print("1: {0[hello]}".format(map))
print("1: {0[hello]10d}".format(map))
print("1: {0[hello]:10d}".format(map))
print("1: {0[hello]:10}".format(map))
json
import json
json.dump([12,{1:2}, [3,4]])
json.dumps([12,{1:2}, [3,4]])
json.dumps([12,{1:2}, [3,4]], indent=4)
print(json.dumps([12,{1:2}, [3,4]], indent=4))
print(json.dumps([12,{1:2}, [3,4]])
print(json.dumps([12,{1:2}, [3,4]]))
json.dumps.__doc__
print(json.dumps.__doc__)
print(json.dumps([12,{1:2}, [3,4]], separators=('x','y')))
def test(list):
 list.append(1)
a = []
test(a)
a
test(a)
a
test(a[:])
a
def scope_test():
  def do_local():
    spam = 'local spam'
  def do_nonlocal():
    spam = 'nonlocal spam'
  def do_global():
    global spam
    spam = 'global spam'
  spam = 'test spam'
  do_local()
  print(spam)
  do_nonlocal()
  print(spam)
  do_global()
  print(spam)
scope_test()
print(spam)
local spam
local
local = 1
print local
print(local)
print(local.format(1))
s = "This is a {}
s = "This is a {}"
print s
print(s)
print(s.format("test"))
print(s.format("test").ljust(10, ' '))
print(s.format("test").rjust(10, ' '))
print(s.format("test").rjust(10, ' '), "hi")
'hi'.rjust(10)
'hi'.ljust(10)
'hi'.ljust(10, ' ')
'hi'.rjust(10, ' ')
print(s.rjust(10).format("test"), "hi")
print(s)
print(s.rjust(10))
s.rjust(10)
s.ljust(10)
s
s = 'This is a {}'.rjust(10)
s
s = 'This is a '.rjust(10)
s
'hi'.rjust(10)
'This is a test'.rjust(10)
'hi'.rjust(10)
'hi there'.rjust(10)
s
s = 'This is a {:<16}'
print(s.format('test'))
s = 'This is a {:>16}'
print(s.format('test'))
print(s.format('machine'))
print(''.format.__doc__)
'hi
'hi'.rjust(10)
'hi there'.rjust(20)
s = 'hi'
s = 'hi
s = 'hi'
10*' ' + s
s^2
s**2
s*2
2/3
s/2
s+s
s-s
a = [1,2,3]
b = [2,3]
a * b
a * 2
a / 2
a + 1
a + a
a - b
a / b
a ^ b
a | b
a or b
a and b
a and not b
not b
a.remobe(b)
a.remove(b)
a = (1,2,3)
b = (2,3)
a - b
a-b
list(set([1,2,3])-set([2,3]))
set([1,2,3])
afk
a = range(1,10)
a
s = set(x ro x in a if x%2 == 0)
s = set(x for x in a if x%2 == 0)
s
enumerate([1,2,3])
e = enumerate([1,2,3])
e.next()
for i in e:
 print(i)
s
for i in enumerate(s):
 print(i)
"abcd efgh ijkl mnop".split()
glbal a
global a
a = 5
def test()"
def test():
 print a
def test():
 print(a)
test()
a = 3
test()
def test():
 a = 10
 print(a)
test()
a = 5
test()
a
test()
a
def test():
 nonlocal a
 a = 3
a
def scope():
 def scope_test():
  nonlocal a
  a = 5
 a = 10
 print(a)
 scope_test()
 print(a)
a
a = 8
a
scope()
a
w
z = [1,2,3]
z*2
zz = [2*x for x in z]
zz
zzz = [x for x in z if x < 3]
zzz
import sys
sys.ps1 = py >
sys.ps1 = "py > "
sys.ps1 = "py> "
for x in z:
(x for x in range(100) for y in range(100) if x / y = 1)
(x,y for x in range(100) for y in range(100) if x / y = 1)
(x for x in range(100))
(x for x in range(100), for y in range(100))
(x for x in range(100) for y in range(100))
a = (x for x in range(100) for y in range(100))
for x in a:
 print x
for x in a:
 print(x)
a = (x for x in range(100) for y in range(100))
while(a):
 print(a)
a
a = (x for x in range(100) for y in range(100))
a.next()
a()
next(a)
__next__(a)
a = (x for x in range(100) for y in range(100))
for x in a:
 print(x)
a = (x for x in range(100) for y in range(100) if x != y)
for x in a:
 print(a)
for x in a:
 print(x)
a = (x for x in range(100) for y in range(x) if x != y)
a = (x*y for x in range(10) for y in range(10))
for x in a:
 print(x)
a = (x*y for x in range(10) for y in range(10))
len(a)
a = (x for x in range(10) for y in range(10))
len(list(a))
range(9,1)
list(range(2,9))
a = (x for x in range(100) for y in range(2,x) if x%y != 0)
list(a)
a = (x for x in range(10) for y in range(2,x) if x%y != 0)
list(a)
a = (x for x in range(10) for y in range(2,x) if x%y == 0)
list(a)
a = (x for x in range(100) for y in range(2,x) if x%y == 0)
set(a)
set(range(100)) - set(a)
set(a)
a = (x for x in range(100) for y in range(2,x) if x%y == 0)
all = set(a)
all
set(range(100)) - all
set(range(10000)) - set((x for x in range(10000) for y in range(2,x) if x%y == 0))
primes = set(range(10000)) - set((x for x in range(10000) for y in range(2,x) if x%y == 0))
import math
primes = set(range(10000)) - set((x for x in range(10000) for y in range(2,math.sqrt(x)) if x%y == 0))
primes = set(range(10000)) - set((x for x in range(10000) for y in range(2,int(math.sqrt(x))) if x%y == 0))
primes
del primes
primes
primes = set(range(10000)) - set((x for x in range(10000) for y in range(2,int(math.sqrt(x))) if x%y == 0))
primes
sort(primes)
sort(list(primes))
sort(list(primes)))
list(primes).sort(
)
primes
lprimes = list(pirmes)
lprimes = list(primes)
lprimes.sort)(
lprimes.sort()
lprimes
class Foo:
 """A simple Foo"""
 i = 123
 def f(self):
  return 'yo man'
Foo.__doc__
Foo.i
x = Foo()
x.f()
def test:
def test():
 return 'hi'
test()
def Bar():
 i = 123
 
Bar()
Bar.i
class Foo:
 name = 'foo'
 def __init__(self, name):
  self.name = name
f = Foo()
f = Foo("bar")
f.name
Foo
Foo.f()
class Foo:
 name = 'Foo'
 def name():
  return name
Foo.name()
Foo.name
class Foo:
 nameatr = 'Foo'
 def name():
  return nameatr
Foo.nameatr
Foo.name()
Foo.name
f = Foo()
f.name()
class Foo:
 nameatr = 'Foo'
 def name(self):
  return nameatr
Foo.name()
f = Foo()
f.name()
class Utils:
 pi = 3.14
 def getPi():
  return pi
Utils.getPi()
class Utils:
 pi = 3.14
 def getPi():
  return Utils.pi
Utils.getPi()
local pi
var pi
val pi
afk
class Hi:
 a = 123
 def a():
  return 456
Hi.a
Hi.a()
class Bi:
 b = 123
 def a():
  return 456
Bi.b
Bi.a()
Bi.c
Bi.c = 5
Bi.c
del Bi.b
Bi.b
def add(a,b):
 return a + b
def sub(a,b):
 return a - b
def mul(a,b):
 return a * b
def div(a,b):
 return a / b
mul(2,3)
div(6,2)
ops = [add,sub,mul,div]
for ((x,y) for x in ops, for y in range(1,4)):
for ((x,y) for x in ops for y in range(1,4)):
for ((x,y) for x in ops for y in range(1,4)) :
for ((x,y) for x in ops for y in range(1,4))
for (x,y for x in ops for y in range(1,4)):
for (x,y) in [(x,y) for x in ops for y in range(1,3)]:
 print(x(y,y))
for (x,y) in [(x,y) for x in ops for y in range(1,3)]:
 print(x + " := " + x(y,y))
 print(str(x) + " := " + x(y,y))
str(ops)
for (x,y) in [(x,y) for x in ops for y in range(1,3)]:
 print(str(x) + " := " + x(y,y))
for (x,y) in [(x,y) for x in ops for y in range(1,3)]:
 print(str(x) + " := " + str(x(y,y)))
list(range(1,3))
class Foo:
 def bark():
  print 'how how!'
class Foo:
 def bark():
  print ('how how!')
Foo.bark()
Class Bar(Foo):
class Bar(Foo):
 def meow():
  print("meow meow meow!")
Bar.bark()
Bar.meow()
Foo.a = 123
Bar.a
Bar.a = 456
Foo.a
Bar.a
import re
re.compile('bar<?foo')
a = re.compile('bar<?foo')
a
a.match("barfoo")
m = a.match("barfoo")
m.groups(
m.groups()
m.start()
m.end()
a.match("123barfoo").start()
a.match("123barfoo")
m = a.match("123barfoo")
m
a.findall("123barfoo")
a = re.compile('bar<!foo')
a.findall("hasfoo")
a.findall("barfoo")
a.findall("foo")
a.findall("bar<!foo")
a = re.compile('bar<?!foo')
a.findall("bar<!foo")
a.findall("barfoo")
a.findall("barsfoo")
a.findall("bersfoo")
a = re.compile("a?=b")
a.findall("abcd")
a = re.compile("a(?=b)")
a.findall("abcd")
a = re.compile("a(?!b)")
a.findall("abcd")
a.findall("acd")
a = re.compile("a(?:bc)d")
a.findall("abcd")
a.match("abcd").groups()
a.match("abcd").group(0)
a.match("abcd").group(1)
a = re.compile("(?<!watch)dog")
a.findall("hounddog")
a.findall("watchdog")
sum(range(4))
from math import pi,sin
{x:sin(x*pi/180) for x in range(0,91)}
class A:
 def a():
  print "A"
class A:
 def a():
  print("A")
class B:
 def a():
  print("B")
class C(A,B):
 pass
c = C()
c.a()
C.a()
import os
os.getcwd()
dir(os)
help(os)
help(A)
help(os)
import glob
glob.glob(*)
glob.glob('*')
glob.glob('docs.python.org/*')
glob.glob('docs.python.org/3/*')
glob.glob('docs.python.org/3/tutorial/*')
glob.glob('docs.python.org/3/tutorial/*a*.html')
import random
help(random)
random.sample(set(range(2000)), 5)
random.choice(["Blue Pill", "Red Pill"])
random.choice(["Loves me", "Loves me not"])
"hello".decode()
"hello".decode('utf-8')
from urllib.request import urlopen
print(urlopen.__doc__)
urlopen
help(urlopen)
a = urlopen('http://www.google.com')
a
b = next(a)
b
b = next(a)
b
print(b)
help(b)
b.decode()
from datetime import date
now = date.today()
now
now - 1
help(now)
x = new date()
x = date()
x = date(0)
x = date(0,0,0)
date.toordinal(now)
from datetime import timedelta
help(timedelta)
td = timedelta()
td.seconds = 60*60*25
td = timedelta(hours=25)
td
now
now + td
now - td
a = 1
b = 2
a
a,b=b,a
a
a,b,c=2,3,4
c
a
(a,b)=(1,2)
a
b
c = (a,b) = (1,2)
c
a
b
v = 1 > 2 > 3
v
v = 3 > 2 > 1
v
v = 3 > 2 > 4
v
v = 3 > 2 && 2 > 1
v = 3 > 2 and 2 > 1
v
v = v and 4 < 5
v
0 or 1
"" or "heloo"
0 or ""
"" or 0
False or 'hello'
[] or 1
False and [] and {} and () and "" and '' and 0
False and [] and {} and () and "" and '' and 0 and 'You'
False and [] and {} and () and "" and '' and 0 or 'You'
False and [] and {} and () and "" and '' and 0
False and [] and {} and () and "" and '' and 0 or xxx
False and [] and {} and () and "" and '' and 0 or xxx or '1'
xxx or 1
a = None
a or 'a'
a != None
if a is None
a is None
a = A()
a is A
isinstance(a, A)
isinstance(a, None)
isinstance(a, (A,B,C))
type(a)
types.
dir(types)
types
def sum(values):
 """Sums it all up
>>> print(sum([1,2,3,4,5]))
15
"""
def sums(values):
 """Sums it all up
>>> print(sum([1,2,3,4,5]))
15
"""
 return sum(values)
sums([12,3])
import doctest
doctest.testmod(sums)
doctest.testmod()
def foo():
 """Bla bla bla
>>>print("Test")
Foo
"""
 return 'Yo!'
doctest.testmod()
def foo():
 """Bla bla bla
>>> print("Test")
Foo
"""
 return 'Yo!'
doctest.testmod()
import json
json.loads('[1,2,3]')
afk
def x(n):
 yield from range(n)
 yield from range(n+10, n+20)
list(x(3))
{i:i*2 for i in range(3)}
